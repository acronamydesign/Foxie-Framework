bool(str)
	if str == "true"
		return true
	else if str == "false"
		return false

string(notStr)
	return ''+notStr

align(t, l, r, b,)
	top t
	left l
	right r
	bottom b

size(w, h)
	width w
	height h

square()
	width arguments
	height arguments

vendor(prop, arg)
	{prop} arg
	-webkit-{prop} arg
	-moz-{prop} arg
	-ms-{prop} arg

transition()
	vendor('transition', arguments)

transform()
	vendor('transform', arguments)

transform-origin()
	vendor('transform-origin', arguments)

user-select()
	vendor('user-select', arguments)

filter()
	vendor('filter', arguments)

box-shadow(val)
	if val == m1
		vendor("box-shadow",unquote(z-1));
	else if val == m2
		vendor("box-shadow",unquote(z-2));
	else if val == m3
		vendor("box-shadow",unquote(z-3));
	else if val == m4
		vendor("box-shadow",unquote(z-4));
	else if val == m5
		vendor("box-shadow",unquote(z-5));
	else
		vendor("box-shadow", val)

border-radius(val)
	vendor("border-radius", val)

background-linear-gradient(startPoint, startColor, startInterval, endColor, endInterval, deprecatedWebkitStartPoint = false, deprecatedWebkitEndPoint = false)
	background-color startColor
	if deprecatedWebkitStartPoint && deprecatedWebkitEndPoint
		background-image -webkit-gradient(linear, deprecatedWebkitStartPoint, deprecatedWebkitEndPoint, color-stop(startInterval, startColor), color-stop(endInterval, endColor))
	background-image -webkit-linear-gradient(startPoint, startColor startInterval, endColor endInterval)
	background-image -moz-linear-gradient(startPoint, startColor startInterval, endColor endInterval)
	background-image -ms-linear-gradient(startPoint, startColor startInterval, endColor endInterval)
	background-image -o-linear-gradient(startPoint, startColor startInterval, endColor endInterval)
	background-image linear-gradient(startPoint, startColor startInterval, endColor endInterval)

pos-rel()
	position:relative;

pos-absol()
	position:absolute;

pos-fixed()
	position:fixed;

pos-static()
	position:static;

clearfix()
	&:before,
	&:after
		content: " "; // 1
		display: table; // 2

	&:after
		clear: both;

	&:after
		*zoom: 1;

vertical()
	position:relative;

	&>*
		position:absolute;
		left:0;
		right:0;
		top:0;
		bottom:0;
		margin:auto 0;

psudo(val = "", disp = "block")
	content:val;
	display:disp;

size(w=0, h=0)
	width:w;
	height:h;

font-url(file)
	return url(file)

webfont(family, file, weight = normal, style = normal)
	@font-face
		font-family family
		src font-url(file + '.eot')
		src font-url(file + '.eot?#iefix') format('embedded-opentype'),
			font-url(file + '.woff') format('woff'),
			font-url(file + '.ttf') format('truetype'),
			font-url(file + '.svg#'+ family) format('svg')
		font-weight weight
		font-style style

// Font
font-size(size)
	if unit(size) is 'px'
		font-size size
		font-size (remove-unit(size) / 10)rem
	else if unit(size) is 'pt'
		font-size (remove-unit(size) * 4 / 3)px
		font-size (remove-unit(size) * 4 / 30)rem
	else
		font-size size

blend()
	background-blend-mode:arguments;

color()
	if arguments == auto
		if round(luminosity(@background or @background-color)) == 1
			color #000
		else if round(luminosity(@background or @background-color)) == 0
			color #fff
	else
		color arguments